par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve((log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(-10*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(-10000*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(10000*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(-1000*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(-1000*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(-1000*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(0.001*x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
dados = subset(dados, Condição == 'aleatorio')
nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
dados = subset(dados, Condição == 'aleatorio')
nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
dados = subset(dados, Condição == 'aleatorio')
nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
dados = subset(dados, Condição == 'aleatorio')
nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
#dados = subset(dados, Condição == 'ordem-decrescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#getwd()
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#getwd()
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#getwd()
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
#dados = subset(dados, Condição == 'ordem-decrescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
dados = subset(dados, Condição == 'ordem-crescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#getwd()
#alterar opcao de acordo com o algoritmo
op <-5
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
#dados = subset(dados, Condição == 'ordem-decrescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
dados = subset(dados, Condição == 'ordem-crescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-6
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
dados = subset(dados, Condição == 'aleatorio')
nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
#dados = subset(dados, Condição == 'ordem-decrescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#alterar opcao de acordo com o algoritmo
op <-6
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
dados = subset(dados, Condição == 'ordem-decrescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
#dados = subset(dados, Condição == 'ordem-crescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
#getwd()
#alterar opcao de acordo com o algoritmo
op <-6
library(readr)
switch(op,
"1" = {dados <- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Selection Sort/Selection Sort.csv")
nomeFile<- "Selection Sort"},
"2" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Insertion Sort/Insertion Sort.csv")
nomeFile<- "Insertion Sort"},
"3" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Merge Sort/Merge Sort.csv")
nomeFile<- "Merge Sort"},
"4" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Heap Sort/Heap Sort.csv")
nomeFile<- "Heap Sort"},
"5" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Aleatorio/Quick Sort Pivo Aleatorio.csv")
nomeFile<- "Quick Sort Pivo Aleatorio"},
"6" = {dados<- read_csv("~/GitHub/T1-AA/Relatorio/Resultados/Quick Sort Pivo Fixo/Quick Sort Pivo Fixo.csv")
nomeFile<- "Quick Sort Pivo Fixo"},
stop("opção inválida")
)
#somar total de segundo*1000000 + Microsegundos
dados$'Tempo total' = dados$`Tempo de execução (microsec)` + (1000000*dados$`Tempo de execução (sec)`)
#dados = subset(dados, Condição == 'aleatorio')
#nome = bquote(.(nomeFile)~"- Vetores Aleatórios")
#dados = subset(dados, Condição == 'ordem-decrescente')
#nome = bquote(.(nomeFile)~"- Vetores Ordem Decrescente")
dados = subset(dados, Condição == 'ordem-crescente')
nome = bquote(.(nomeFile)~"- Vetores Ordem Crescente")
plot(dados$`Tamanho do vetor`, dados$`Tempo de execução (microsec)`, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Trocas realizadas`, xlab = "Tamanho do vetor", ylab = "Número de trocas", main = nome)
plot(dados$`Tamanho do vetor`, dados$`Comparações realizadas`, xlab = "Tamanho do vetor", ylab = "Número de comparações", main = nome)
##TEMPOS DE EXECUÇÃO
library(dplyr)
graph<- aggregate(dados$'Tempo total', list(dados$`Tamanho do vetor`), FUN = mean)
#plot das médias
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~"- Médias"))
plot(graph, xlab = "Tamanho do vetor", ylab = "Tempo de execução (microsegundos)", main = bquote(.(nome) ~""), pch = 18, col = "gray",xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Melhor CASO
par(new = TRUE)
curve(x*(log(x,base = 2)), from = 1, to = 10000, axes = FALSE, col = "green", ylab = "", xlab = "",lwd=2,xlim=c(1,10000),ylim=c(0,5000))
##MUDAR FUNÇÃO Pior CASO
par(new = TRUE)
curve(x^2, from = 0, to = 10000, axes = FALSE,lwd=2, ylab = "", xlab = "" ,col = "red",xlim=c(1,10000),ylim=c(0,5000))
